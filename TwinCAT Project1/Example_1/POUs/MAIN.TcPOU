<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{4806e156-ebbf-4070-8291-7b3f5e6f80bf}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// Objects
	SimulatedIO : FB_SimulatedIO;
	Pump : FB_Pump;
	PumpController : FB_PumpController := (nTargetPressure := TARGET_PRESSURE, nMaximumPressure := MAXIMUM_PRESSURE,
		nMinimumPressure := MINIMUM_PRESSURE, nInitialPressure := Pump.nPressure);
	
	// Variables for Graph
	aGraphPoints : ARRAY[1..1, 1..1000] OF ST_Point;
	nPollDelay : UINT := 10; 
	nCurrentPoint : INT := 1;
	nPollCount : UINT := 0;
	
	// Main Loop Variables
	bTurnPumpControllerOn : BOOL := FALSE;
	bPumpState : BOOL := FALSE;
	bValveState : BOOL := FALSE;
	bEmergencyStopPump : BOOL := FALSE;
	sState : STRING(20) := 'IDLE';
	bManualPump : BOOL := FALSE;
	bManualRelease : BOOL := FALSE;
END_VAR
VAR CONSTANT
	MAXIMUM_PRESSURE : USINT := 10;
	MINIMUM_PRESSURE : USINT := 8;
	TARGET_PRESSURE : USINT := 9;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_VAR.bReset THEN
	bEmergencyStopPump := FALSE;
	bTurnPumpControllerOn := FALSE;
	PumpController.Reset();
	bManualPump := FALSE;
	bManualRelease := FALSE;
	GVL_VAR.bReset := FALSE;
ELSIF NOT bEmergencyStopPump AND NOT GVL_VAR.bLeakDetected AND NOT GVL_VAR.bBrokenPump THEN // All Systems Normal
	sState := 'IDLING';
	IF bTurnPumpControllerOn THEN
		// PumpController.RunSimpleController(bTurnPumpControllerOn);
		PumpController.RunPIDController(bTurnPumpControllerOn);
		bPumpState := PumpController.bPumpState;
		bValveState := PumpController.bValveState;
		Pump.SetRelay(bPumpState);
		Pump.SetValve(bValveState);
		IF bPumpState THEN
			sState := 'PUMPING';
		ELSIF bValveState THEN
			sState := 'RELEASING';
		END_IF
	ELSIF bManualRelease THEN
		sState := 'M_RELEASE';
		GVL_VAR.nValveLoss := 0.02;
		Pump.SetValve(TRUE);
		Pump.SetRelay(FALSE);
	ELSIF bManualPump THEN
		sState := 'M_PUMPING';
		GVL_VAR.nPumpGain := 0.01;
		Pump.SetRelay(TRUE);
		Pump.SetValve(FALSE);
	ELSE
		PUMP.SetRelay(FALSE);
		PUMP.SetValve(FALSE);
	END_IF
	
ELSE // Some Error! 
	IF GVL_VAR.bBrokenPump THEN
		sState := 'PUMP_BROKE';
	ELSIF bEmergencyStopPump THEN
		sState := 'E_STOPPED';
	ELSIF GVL_Var.bLeakDetected THEN
		sState := 'LEAK!';
	END_IF
	Pump.SetRelay(FALSE);
	bTurnPumpControllerOn := FALSE;
END_IF

// Save pressure data for graph
IF nCurrentPoint > 1000 THEN
	nCurrentPoint := 2;
	nPollCount := 2;
ELSIF nPollCount > 9 THEN
	aGraphPoints[1, nCurrentPoint].x := nCurrentPoint;
	aGraphPoints[1, nCurrentPoint].y := Pump.nPressure;
	nPollCount := 0;
	nCurrentPoint := 1 + nCurrentPoint;
ELSE
	nPollCount := nPollCount + 1;
END_IF

Pump();
// Simulate I/O
SimulatedIO();]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="361" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="420" Count="1" />
      <LineId Id="367" Count="1" />
      <LineId Id="418" Count="0" />
      <LineId Id="369" Count="4" />
      <LineId Id="422" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="432" Count="1" />
      <LineId Id="377" Count="2" />
      <LineId Id="423" Count="0" />
      <LineId Id="380" Count="3" />
      <LineId Id="427" Count="0" />
      <LineId Id="384" Count="33" />
      <LineId Id="93" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>